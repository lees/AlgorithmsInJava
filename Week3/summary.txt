
Assessment Summary
Compilation:  PASSED
Style:        FAILED
Findbugs:     No potential bugs found.
API:          PASSED

Correctness:  30/36 tests passed
Memory:       1/1 tests passed
Timing:       16/17 tests passed

Raw score: 87.70% [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]
Assessment Details
The following files were submitted:
----------------------------------
total 16K
-rw-r--r-- 1 3.9K Mar  6 20:12 Brute.java
-rw-r--r-- 1 2.2K Mar  6 20:12 Fast.java
-rw-r--r-- 1 2.4K Mar  6 20:12 Point.java
-rw-r--r-- 1 2.9K Mar  6 20:12 studentSubmission.zip


******************************************************************************
*  compiling
******************************************************************************


% javac Point.java
*-----------------------------------------------------------
================================================================

% javac Brute.java
*-----------------------------------------------------------
================================================================

% javac Fast.java
*-----------------------------------------------------------
================================================================



% checkstyle *.java
*-----------------------------------------------------------
Fast.java:6:1: File contains tab characters (this is the first instance).
Fast.java:49:44: ';' is not followed by whitespace.
Fast.java:49:44: '}' is not preceded with whitespace.
Fast.java:51:29: Name 'end_addition' must match pattern '^[a-z][a-zA-Z0-9]*$|^[A-Z][A-Z_0-9]*$'.
Fast.java:81:52: ',' is not followed by whitespace.
Fast.java:88:57: ';' is followed by whitespace.
Fast.java:96:42: Control variable 'j' is modified.
Fast.java:103:42: Control variable 'j' is modified.
================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
Point:

Brute:

Fast:

================================================================


******************************************************************************
*  executing
******************************************************************************

Testing methods in Point
*-----------------------------------------------------------
Running 3 total tests.

Test 1: p.slopeTo(q)
  *  positive infinite slope, where p and q have coordinates in [0, 500)
  *  positive infinite slope, where p and q have coordinates in [0, 32768)
  *  negative infinite slope, where p and q have coordinates in [0, 500)
  *  negative infinite slope, where p and q have coordinates in [0, 32768)
  *  positive zero     slope, where p and q have coordinates in [0, 500)
  *  positive zero     slope, where p and q have coordinates in [0, 32768)
  *  symmetric  for random points p and q with coordinates in [0, 500)
  *  symmetric  for random points p and q with coordinates in [0, 32768)
  *  transitive for random points p, q, and r with coordinates in [0, 500)
  *  transitive for random points p, q, and r with coordinates in [0, 32768)
  *  slopeTo(), where p and q have coordinates in [0, 500)
  *  slopeTo(), where p and q have coordinates in [0, 32768)
  *  slopeTo(), where p and q have coordinates in [0, 10)
  *  throw a java.lang.NullPointerException if argument is null
==> passed

Test 2: p.compareTo(q)
  *  reflexive, where p and q have coordinates in [0, 500)
  *  reflexive, where p and q have coordinates in [0, 32768)
  *  antisymmetric, where p and q have coordinates in [0, 500)
  *  antisymmetric, where p and q have coordinates in [0, 32768)
  *  transitive, where p, q, and r have coordinates in [0, 500)
  *  transitive, where p, q, and r have coordinates in [0, 32768)
  *  sign of compareTo(), where p and q have coordinates in [0, 500)
  *  sign of compareTo(), where p and q have coordinates in [0, 32768)
  *  sign of compareTo(), where p and q have coordinates in [0, 10)
  *  throw java.lang.NullPointerException exception if argument is null
==> passed

Test 3: p.SLOPE_ORDER.compare(q, r)
  *  reflexive, where p and q have coordinates in [0, 500)
  *  reflexive, where p and q have coordinates in [0, 32768)
  *  antisymmetric, where p, q, and r have coordinates in [0, 500)
  *  antisymmetric, where p, q, and r have coordinates in [0, 32768)
  *  transitive, where p, q, r, and s have coordinates in [0, 500)
  *  transitive, where p, q, r, and s have coordinates in [0, 32768)
  *  sign of compare(), where p, q, and r have coordinates in [0, 500)
  *  sign of compare(), where p, q, and r have coordinates in [0, 32768)
  *  sign of compare(), where p, q, and r have coordinates in [0, 10)
  *  throw java.lang.NullPointerException if either argument is null
==> passed


Total: 3/3 tests passed!

================================================================

******************************************************************************
*  executing with reference Point
******************************************************************************

Testing methods in Brute
*-----------------------------------------------------------
Running 15 total tests.

Test 0: Run on small input files; show standard output; compare
standard output and standard drawing to the reference solution

% java Brute input6.txt

[testing standard output]
(14000, 10000) -> (18000, 10000) -> (19000, 10000) -> (21000, 10000)
(14000, 10000) -> (18000, 10000) -> (21000, 10000) -> (32000, 10000)
(14000, 10000) -> (19000, 10000) -> (21000, 10000) -> (32000, 10000)
(18000, 10000) -> (19000, 10000) -> (21000, 10000) -> (32000, 10000)
(14000, 10000) -> (18000, 10000) -> (19000, 10000) -> (32000, 10000)

[testing standard drawing]


% java Brute input8.txt

[testing standard output]
(3000, 4000) -> (6000, 7000) -> (14000, 15000) -> (20000, 21000)
(10000, 0) -> (7000, 3000) -> (3000, 7000) -> (0, 10000)

[testing standard drawing]


==> passed

Test 1a (stdout): Points from a file with at most 4 on any line segment
  *  equidistant.txt
  *  input40.txt
  *  input48.txt
==> passed

Test 1b (stddraw): Points from a file with at most 4 on any line segment
  *  equidistant.txt
  *  input40.txt
  *  input48.txt
==> passed

Test 2: Points from a file with horizontal line segments
  *  horizontal5.txt
  *  horizontal25.txt
==> passed

Test 3: Points from a file with vertical line segments
  *  vertical5.txt
  *  vertical25.txt
==> passed

Test 4a (stdout):Points from a file with no line segments
  *  random23.txt
  *  random38.txt
==> passed

Test 4b (stddraw): Points from a file with no line segments
  *  random23.txt
  *  random38.txt
==> passed

Test 5 (stddraw): Points from a file with 5 or more on any line segment
  *  input9.txt
  *  input10.txt
  *  input20.txt
==> passed

Test 6a (stdout): Points from a file with fewer than 4 points
  *  input1.txt
  *  input2.txt
  *  input3.txt
==> passed

Test 6b (stddraw): Points from a file with fewer than 4 points
  *  input1.txt
  *  input2.txt
  *  input3.txt
==> passed

Test 7 (stdraw): Check that each point is drawn exactly once
  *  equidistant.txt
  *  input40.txt
  *  input48.txt
==> passed

Test 8 (stdout): Using compareTo() and compare() methods that may not return -1, +1, 0
  *  equidistant.txt
  *  input40.txt
  *  input48.txt
==> passed

Test 9 (stddraw): N random 4-point line segments
  *   1 random 4-point line segments (not vertical or horizontal)
  *   5 random 4-point line segments (not vertical or horizontal)
  *  10 random 4-point line segments (not vertical or horizontal)
  *  15 random 4-point line segments (not vertical or horizontal)
==> passed

Test 10 (stddraw): Random distinct points in a given range
  *   5 random points in [0..10) x [0..10)
  *  10 random points in [0..10) x [0..10)
  *  25 random points in [0..10) x [0..10)
==> passed

Test 11 (stddraw): Points distributed across grids of a given size
  *   9 random points in [0..3) x [0..3)
  *  16 random points in [0..4) x [0..4)
  *  25 random points in [0..5) x [0..5)
  *  36 random points in [0..6) x [0..6)
  *  49 random points in [0..7) x [0..7)
  *  20 random points in [0..5) x [0..4)
  *  24 random points in [0..6) x [0..4)
  *  40 random points in [0..10) x [0..4)
==> passed


Total: 15/15 tests passed!

================================================================

Testing methods in Fast
*-----------------------------------------------------------
Running 18 total tests.

Test 0: Run on small input files; show standard output; compare
standard output and standard drawing to the reference solution

% java Fast input6.txt

[testing standard output]
(32000, 10000) -> (21000, 10000) -> (19000, 10000) -> (18000, 10000) -> (14000, 10000)
(32000, 10000) -> (21000, 10000) -> (19000, 10000) -> (18000, 10000)
      -  student   solution has 2 non-null entries
      -  reference solution has 1 non-null entries
      -  1 extra entry in student solution: (32000, 10000) -> (21000, 10000) -> (19000, 10000) -> (18000, 10000)

[testing standard drawing]
      -  student   solution has 2 non-null entries
      -  reference solution has 1 non-null entries
      -  1 extra entry in student solution: (18000, 10000) -> (32000, 10000)


% java Fast input8.txt

[testing standard output]
(0, 10000) -> (3000, 7000) -> (7000, 3000) -> (10000, 0)
(20000, 21000) -> (14000, 15000) -> (6000, 7000) -> (3000, 4000)

[testing standard drawing]


==> FAILED

Test 1a (stdout): Points from a file with at most 4 on any line segment
  *  equidistant.txt
  *  input40.txt
  *  input48.txt
  *  input299.txt
==> passed

Test 1b (stddraw): Points from a file with at most 4 on any line segment
  *  equidistant.txt
  *  input40.txt
  *  input48.txt
  *  input299.txt
==> passed

Test 2a (stdout): Points from a file with horizontal line segments
  *  horizontal5.txt
  *  horizontal25.txt
  *  horizontal50.txt
  *  horizontal75.txt
  *  horizontal100.txt
==> passed

Test 2b (stddraw): Points from a file with horizontal line segments
  *  horizontal5.txt
  *  horizontal25.txt
  *  horizontal50.txt
  *  horizontal75.txt
  *  horizontal100.txt
==> passed

Test 3a (stdout): Points from a file with vertical line segments
  *  vertical5.txt
  *  vertical25.txt
  *  vertical50.txt
  *  vertical75.txt
  *  vertical100.txt
==> passed

Test 3b (stddraw): Points from a file with vertical line segments
  *  vertical5.txt
  *  vertical25.txt
  *  vertical50.txt
  *  vertical75.txt
  *  vertical100.txt
==> passed

Test 4a (stdout): Points from a file with no line segments
  *  random23.txt
  *  random38.txt
  *  random91.txt
  *  random152.txt
==> passed

Test 4b (stddraw): Points from a file with no line segments
  *  random23.txt
  *  random38.txt
  *  random91.txt
  *  random152.txt
==> passed

Test 5a (stdout): Points from a file with 5 or more on any line segment
  *  input9.txt
      -  student   solution has 6 non-null entries
      -  reference solution has 1 non-null entries
      -  5 extra entries in student solution, including: (9000, 9000) -> (8000, 8000) -> (7000, 7000) -> (6000, 6000) -> (5000, 5000) -> (4000, 4000) -> (3000, 3000) -> (2000, 2000)
  *  input10.txt
      -  student   solution has 3 non-null entries
      -  reference solution has 2 non-null entries
      -  1 extra entry in student solution: (4000, 30000) -> (3500, 28000) -> (3000, 26000) -> (2000, 22000)
  *  input20.txt
      -  student   solution has 9 non-null entries
      -  reference solution has 5 non-null entries
      -  4 extra entries in student solution, including: (8192, 29184) -> (7168, 29184) -> (6144, 29184) -> (5120, 29184)
  *  input50.txt
      -  student   solution has 9 non-null entries
      -  reference solution has 7 non-null entries
      -  2 extra entries in student solution, including: (18000, 30000) -> (18000, 27000) -> (18000, 26000) -> (18000, 23000)
  *  input80.txt
      -  student   solution has 41 non-null entries
      -  reference solution has 31 non-null entries
      -  10 extra entries in student solution, including: (25000, 31000) -> (25000, 29000) -> (25000, 27000) -> (25000, 12000) -> (25000, 9000)
  *  input300.txt
      -  student   solution has 7 non-null entries
      -  reference solution has 6 non-null entries
      -  1 extra entry in student solution: (7300, 31650) -> (7300, 25700) -> (7300, 17000) -> (7300, 10450)
  *  kw1260.txt
      -  student   solution has 645 non-null entries
      -  reference solution has 288 non-null entries
      -  357 extra entries in student solution, including: (15966, 19981) -> (15949, 19981) -> (15932, 19981) -> (15915, 19981) -> (15898, 19981) -> (15475, 19981) -> (15052, 19981) -> (14843, 19981) -> (14719, 19981) -> (14629, 19981) -> (14595, 19981) -> (14471, 19981) -> (14347, 19981) -> (14330, 19981) -> (14313, 19981) -> (14296, 19981) -> (14279, 19981) -> (14206, 19981) -> (14120, 19981) -> (13961, 19981) -> (13802, 19981) -> (13643, 19981) -> (13626, 19981) -> (13609, 19981) -> (13592, 19981) -> (13575, 19981)
  *  rs1423.txt
  *  inarow.txt
      -  student   solution has 15 non-null entries
      -  reference solution has 5 non-null entries
      -  10 extra entries in student solution, including: (0, 30000) -> (0, 25000) -> (0, 20000) -> (0, 15000) -> (0, 11000) -> (0, 10000) -> (0, 5000)
==> FAILED

Test 5b (stddraw): Points from a file with 5 or more on any line segment
  *  input9.txt
      -  student   solution has 6 non-null entries
      -  reference solution has 1 non-null entries
      -  5 extra entries in student solution, including: (6000, 6000) -> (9000, 9000)
  *  input10.txt
      -  student   solution has 3 non-null entries
      -  reference solution has 2 non-null entries
      -  1 extra entry in student solution: (2000, 22000) -> (4000, 30000)
  *  input20.txt
      -  student   solution has 9 non-null entries
      -  reference solution has 5 non-null entries
      -  4 extra entries in student solution, including: (5120, 29184) -> (8192, 29184)
  *  input50.txt
      -  student   solution has 9 non-null entries
      -  reference solution has 7 non-null entries
      -  2 extra entries in student solution, including: (18000, 23000) -> (18000, 30000)
  *  input80.txt
      -  student   solution has 41 non-null entries
      -  reference solution has 31 non-null entries
      -  10 extra entries in student solution, including: (8000, 23000) -> (30000, 23000)
  *  input300.txt
      -  student   solution has 7 non-null entries
      -  reference solution has 6 non-null entries
      -  1 extra entry in student solution: (7300, 10450) -> (7300, 31650)
  *  kw1260.txt
      -  student   solution has 645 non-null entries
      -  reference solution has 288 non-null entries
      -  357 extra entries in student solution, including: (13180, 30413) -> (14764, 30467)
  *  rs1423.txt
  *  inarow.txt
      -  student   solution has 15 non-null entries
      -  reference solution has 5 non-null entries
      -  10 extra entries in student solution, including: (0, 15000) -> (0, 30000)
==> FAILED

Test 6a (stdout): Points from a file with fewer than 4 points
  *  input1.txt
  *  input2.txt
  *  input3.txt
==> passed

Test 6b (stddraw): Points from a file with fewer than 4 points
  *  input1.txt
  *  input2.txt
  *  input3.txt
==> passed

Test 7 (stdraw): Check that each point is drawn exactly once
  *  equidistant.txt
  *  input40.txt
  *  input48.txt
==> passed

Test 8 (stdout): Assumes compareTo() or compare() returns -1, +1, or 0
  *  equidistant.txt
  *  input40.txt
  *  input48.txt
  *  input299.txt
==> passed

Test 9 (stddraw): N random 4-point line segments
  *    1 random 4-point line segments (not vertical or horizontal)
  *    5 random 4-point line segments (not vertical or horizontal)
  *   25 random 4-point line segments (not vertical or horizontal)
      -  student   solution has 26 non-null entries
      -  reference solution has 25 non-null entries
      -  1 extra entry in student solution: (5006, 100) -> (6275, 4377)
     [failed on trial 196 of 200]
  *   50 random 4-point line segments (not vertical or horizontal)
  *  100 random 4-point line segments (not vertical or horizontal)
      -  student   solution has 101 non-null entries
      -  reference solution has 100 non-null entries
      -  1 extra entry in student solution: (8432, 775) -> (13370, 14766)
     [failed on trial 7 of 10]
==> FAILED

Test 10 (stddraw): Random distinct points in a given range
  *    5 random points in [0..10) x [0..10)
  *   10 random points in [0..10) x [0..10)
      -  student   solution has 2 non-null entries
      -  reference solution has 1 non-null entries
      -  1 extra entry in student solution: (3, 1) -> (9, 7)
     [failed on trial 16 of 500]
  *   50 random points in [0..10) x [0..10)
      -  student   solution has 81 non-null entries
      -  reference solution has 44 non-null entries
      -  37 extra entries in student solution, including: (1, 9) -> (8, 9)
     [failed on trial 1 of 100]
  *   90 random points in [0..10) x [0..10)
      -  student   solution has 305 non-null entries
      -  reference solution has 125 non-null entries
      -  180 extra entries in student solution, including: (6, 9) -> (9, 9)
     [failed on trial 1 of 100]
  *  200 random points in [0..50) x [0..50)
      -  student   solution has 387 non-null entries
      -  reference solution has 253 non-null entries
      -  134 extra entries in student solution, including: (20, 49) -> (48, 49)
     [failed on trial 1 of 100]
==> FAILED

Test 11 (stddraw): N*M points on an N x M grid
  *    9 random points in [0..3) x [0..3)
  *   16 random points in [0..4) x [0..4)
  *   25 random points in [0..5) x [0..5)
      -  student   solution has 28 non-null entries
      -  reference solution has 16 non-null entries
      -  12 extra entries in student solution, including: (1, 4) -> (4, 4)
     [failed on trial 1 of 1]
  *  100 random points in [0..10) x [0..10)
      -  student   solution has 394 non-null entries
      -  reference solution has 154 non-null entries
      -  240 extra entries in student solution, including: (6, 9) -> (9, 9)
     [failed on trial 1 of 1]
  *  400 random points in [0..20) x [0..20)
      -  student   solution has 5646 non-null entries
      -  reference solution has 2446 non-null entries
      -  3200 extra entries in student solution, including: (16, 19) -> (19, 19)
     [failed on trial 1 of 1]
  *   20 random points in [0..5) x [0..4)
      -  student   solution has 17 non-null entries
      -  reference solution has 13 non-null entries
      -  4 extra entries in student solution, including: (1, 3) -> (4, 3)
     [failed on trial 1 of 1]
  *   24 random points in [0..6) x [0..4)
      -  student   solution has 24 non-null entries
      -  reference solution has 16 non-null entries
      -  8 extra entries in student solution, including: (2, 3) -> (5, 3)
     [failed on trial 1 of 1]
  *   40 random points in [0..10) x [0..4)
      -  student   solution has 62 non-null entries
      -  reference solution has 38 non-null entries
      -  24 extra entries in student solution, including: (6, 3) -> (9, 3)
     [failed on trial 1 of 1]
  *   60 random points in [0..15) x [0..4)
      -  student   solution has 123 non-null entries
      -  reference solution has 79 non-null entries
      -  44 extra entries in student solution, including: (11, 3) -> (14, 3)
     [failed on trial 1 of 1]
  *  100 random points in [0..25) x [0..4)
      -  student   solution has 297 non-null entries
      -  reference solution has 213 non-null entries
      -  84 extra entries in student solution, including: (21, 3) -> (24, 3)
     [failed on trial 1 of 1]
==> FAILED


Total: 12/18 tests passed!

================================================================

******************************************************************************
*  memory usage
******************************************************************************

Computing memory of Point
*-----------------------------------------------------------
Running 1 total tests.

Student memory = 56 bytes (passed)

Total: 1/1 tests passed!

================================================================



******************************************************************************
*  timing
******************************************************************************

Timing Brute
*-----------------------------------------------------------
Running 4 total tests.

Test 1a-1e: Find collinear points among N random distinct points

                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.09         680           0            680                 2176         
=> passed    32   0.02        5456           0           5456                16896         
=> passed    64   0.02       43680           0          43680               133120         
=> FAILED   128   0.04      349504           0         349504              1056768   (1.3x)
==> 3/4 tests passed

Total: 3/4 tests passed!

================================================================



Timing Fast
*-----------------------------------------------------------
Running 13 total tests.

Maximum time allowed per test = 10 seconds

Test 1a-1g: Find collinear points among N random distinct points

                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed   128   0.16       16125       39344          94813                  734         
=> passed   256   0.12       65021      186389         437799                 1732         
=> passed   512   0.30      261116      868438        1997992                 3948         
=> passed  1024   0.40     1046521     3964799        8976119                 8961         
==> 4/4 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (8976119 / 1997992) = 2.17
=> passed

==> 5/5 tests passed

Test 2a-2e: Find collinear points among the 4N points on an N x 4 grid

                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed   128   0.40      207268      245903         699074                 3972         
=> passed   256   0.51      829604      927949        2685502                 8978         
=> passed   512   1.83     3319460     3607526       10534512                19999         
==> 3/3 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (10534512 / 2685502) = 1.97
=> passed

==> 4/4 tests passed

Test 3a-3e: Find collinear points among the 8N points on an N x 8 grid

                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.17      209678      385257         980192                 2990         
=> passed   128   0.48      839268     1438625        3716518                 6168         
=> passed   256   1.73     3358148     5568216       14494580                12554         
==> 3/3 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (14494580 / 3716518) = 1.96
=> passed

==> 4/4 tests passed

Total: 13/13 tests passed!

================================================================


