Assessment Summary
Compilation:  PASSED
Style:        FAILED
Findbugs:     Potential bugs found.
API:          PASSED

Correctness:  13/25 tests passed
Memory:       8/8 tests passed
Timing:       0/17 tests passed

Raw score: 43.80% [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]
Assessment Details
The following files were submitted:
----------------------------------
total 16K
-rw-r--r-- 1 5.7K Mar  9 18:55 Board.java
-rw-r--r-- 1 3.0K Mar  9 18:55 Solver.java
-rw-r--r-- 1 2.6K Mar  9 18:55 studentSubmission.zip


******************************************************************************
*  compiling
******************************************************************************


% javac Board.java
*-----------------------------------------------------------
================================================================

% javac Solver.java
*-----------------------------------------------------------
================================================================



% checkstyle *.java
*-----------------------------------------------------------
Board.java:97:29: ',' is not followed by whitespace.
Board.java:99:45: ',' is not followed by whitespace.
Board.java:128:40: ',' is not followed by whitespace.
Board.java:132:16: 'if' is not followed by whitespace.
Board.java:135:40: ',' is not followed by whitespace.
Board.java:142:40: ',' is not followed by whitespace.
Board.java:146:40: ',' is not followed by whitespace.
Board.java:154:40: ',' is not followed by whitespace.
Board.java:161:40: ',' is not followed by whitespace.
Board.java:168:40: ',' is not followed by whitespace.
Board.java:172:40: ',' is not followed by whitespace.
Solver.java:5:1: File contains tab characters (this is the first instance).
Solver.java:11:17: Variable access definition in wrong order.
Solver.java:11:28: Variable 'moves' must be private and have accessor methods.
Solver.java:13:17: Variable access definition in wrong order.
Solver.java:13:30: Variable 'board' must be private and have accessor methods.
Solver.java:32:59: ',' is not followed by whitespace.
================================================================


% findbugs *.class
*-----------------------------------------------------------
H C EC_UNRELATED_TYPES EC: Call to Board.equals(Solver$Node) in new Solver(Board)  At Solver.java:[line 55]
Warnings generated: 1
================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
Board:

Solver:

================================================================


******************************************************************************
*  executing
******************************************************************************

Testing methods in Board
*-----------------------------------------------------------
Running 16 total tests.

Test 1: Test hamming() with file inputs to ensure that it calculates the correct distance
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle07.txt
  *  puzzle17.txt
  *  puzzle27.txt
  *  puzzle2x2-unsolvable1.txt
==> passed

Test 2: Test hamming() with random puzzle states
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
==> passed

Test 3: Test manhattan() with file inputs
  *  puzzle04.txt
     -  student   manhattan() = 7
     -  reference manhattan() = 4
3
 0  1  3 
 4  2  5 
 7  8  6 

  *  puzzle00.txt
  *  puzzle07.txt
     -  student   manhattan() = 9
     -  reference manhattan() = 7
3
 1  2  3 
 0  7  6 
 5  4  8 

  *  puzzle17.txt
  *  puzzle27.txt
     -  student   manhattan() = 15
     -  reference manhattan() = 17
3
 5  8  7 
 1  4  6 
 3  0  2 

  *  puzzle2x2-unsolvable1.txt
==> FAILED

Test 4: Test manhattan() with random puzzle states
  *  2-by-2
     -  student   manhattan() = 2
     -  reference manhattan() = 3
2
 2  0 
 3  1 

     -  Failed on trial 2 of 1000

  *  3-by-3
     -  student   manhattan() = 11
     -  reference manhattan() = 13
3
 4  6  5 
 3  1  0 
 7  8  2 

     -  Failed on trial 2 of 1000

  *  4-by-4
     -  student   manhattan() = 33
     -  reference manhattan() = 31
4
11  8  2  0 
14  1  6  3 
10  5  7 13 
 9  4 15 12 

     -  Failed on trial 1 of 1000

  *  5-by-5
     -  student   manhattan() = 82
     -  reference manhattan() = 80
5
23 19  8  1 16 
 3 13 14 10 12 
 0 22 15  2 18 
21 11 17  7 24 
 5  4  6 20  9 

     -  Failed on trial 1 of 1000

  *  9-by-9
     -  student   manhattan() = 475
     -  reference manhattan() = 477
9
 9 49 18 55 31 21  5 76 65 
44 69 27 56 33 15 32 57  6 
72 46 48 22 58 67  4 38 37 
 2 42 14 54 73 16 45 36  0 
71 52 75 66 41 40 13 12 59 
80 70 43 19 60 51  3 50 53 
35 77 25  7 62  8 74 79 63 
30 11 28 24 34 78 23 39 61 
29 68 10  1 64 17 20 47 26 

     -  Failed on trial 2 of 1000

  *  10-by-10
     -  student   manhattan() = 624
     -  reference manhattan() = 625
10
71 69 46 74 52 72 21 16 91 47 
67 42 27 99 40 13 29 44 19 38 
37 33 95  9  4 56 49 80 58 68 
51 88 81  6 39 86 54 30 25 41 
12 97 94 87 98 77 50 14  1 53 
15 60 11 22 59 43 36 35 75  5 
 3 45 64 83 96 24 90 78 28 23 
79 82 70 84 66 62  8 10 31 18 
73 20  7 32  2 63 55 61 48  0 
85 57 17 65 92 26 34 76 93 89 

     -  Failed on trial 1 of 1000

==> FAILED

Test 5: Test dimension() with random puzzle states
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
==> passed

Test 6: Test toString() with file inputs to ensure that it outputs boards in the correct format
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
==> passed

Test 7: Test neighbors() with file inputs to ensure that the correct neighbor board are generated
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
==> passed

Test 8: Test neighbors() with random puzzle inputs
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
==> passed

Test 9: Test twin() with file inputs to ensure that a correct twin is generated
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
==> passed

Test 10: Test twin() with random puzzle states
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
==> passed

Test 11: Test isGoal() on file inputs
  *  puzzle04.txt
  *  puzzle16.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
==> passed

Test 12: Check whether two Board objects can be created at the same time and still correctly function
  *   random boards of size 3-by-3 and 3-by-3
  *   random boards of size 4-by-4 and 4-by-4
  *   random boards of size 2-by-2 and 2-by-2
  *   random boards of size 3-by-3 and 4-by-4
  *   random boards of size 4-by-4 and 3-by-3
==> passed

Test 13: Check equals()
  *  reflexive
  *  symmetric
  *  checks that individual entries of array are equal
  *  argument is object of type String
  *  argument is object of type Object
  *  argument is null
  *  argument is Board of different dimension
==> passed

Test 14: Check that Board is immutable by changing argument 2d array after construction
 and making sure Board does not change
==> passed

Test 15: Call hamming() on a board that is kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1th neighbor of puzzle27.txt
  * 2th neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed

Test 16: Call manhattan() on a board that is a kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
     -  student   manhattan() = 15
     -  reference manhattan() = 17
        3
         5  8  7 
         1  4  6 
         3  0  2 

  * 1th neighbor of puzzle27.txt
     -  student   manhattan() = 17
     -  reference manhattan() = 18
        3
         5  8  7 
         1  0  6 
         3  4  2 

  * 2th neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
     -  student   manhattan() = 15
     -  reference manhattan() = 16
        3
         5  7  0 
         1  8  6 
         3  4  2 

  * 13th neighbor of puzzle00.txt
     -  student   manhattan() = 9
     -  reference manhattan() = 5
        10
         1  2  3  4  5  6  7  8  9 10 
        11 12 13 14 15 16 17 18 19 20 
        21 22 23 24 25 26 27 28 29 30 
        31 32 33 34 35 36 37 38 39 40 
        41 42 43 44 45 46 47 48 49 50 
        51 52 53 54 55 56 57 58 59 60 
        61 62 63 64 65 66 67 68 69 70 
        71 72 73 74 75 76 77 78 79 80 
        81 82 83 84 85  0 86 87 89 90 
        91 92 93 94 95 96 97 88 98 99 

  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> FAILED


Total: 13/16 tests passed!

================================================================

******************************************************************************
*  **** executing with reference Board.java ****
******************************************************************************

Testing methods in Solver
*-----------------------------------------------------------
Running 9 total tests.

Test 1: Call moves() with file inputs to ensure that Solver solves the puzzle in the correct minimum number of moves
  *  puzzle00.txt
  *  puzzle01.txt
  *  puzzle02.txt
  *  puzzle03.txt
  *  puzzle04.txt
  *  puzzle05.txt
  *  puzzle06.txt
  *  puzzle07.txt
  *  puzzle08.txt
  *  puzzle09.txt
  *  puzzle10.txt
  *  puzzle11.txt
  *  puzzle12.txt
  *  puzzle13.txt
==> passed

Test 2: Call solution() with file inputs to ensure that the correct sequence of moves is followed
  *  puzzle00.txt
  *  puzzle01.txt
    wrong initial board
     - student   solution() initial board = 2
 1  2 
 3  0 

     - reference solution() initial board = 2
 1  0 
 3  2 

  *  puzzle02.txt
    wrong initial board
     - student   solution() initial board = 9
 1  2  3  4  5  6  7  8  9 
10 11 12 13 14 15 16 17 18 
19 20 21 22 23 24 25 26 27 
28 29 30 31 32 33 34 35 36 
37 38 39 40 41 42 43 44 45 
46 47 48 49 50 51 52 53 54 
55 56 57 58 59 60 61 62 63 
64 65 66 67 68 69 70 71 72 
73 74 75 76 77 78 79 80  0 

     - reference solution() initial board = 9
 1  2  3  4  5  6  7  8  9 
10 11 12 13 14 15 16 17 18 
19 20 21 22 23 24 25 26 27 
28 29 30 31 32 33 34 35 36 
37 38 39 40 41 42 43 44 45 
46 47 48 49 50 51 52 53 54 
55 56 57 58 59 60 61 62 63 
64 65 66 67 68 69 70  0 71 
73 74 75 76 77 78 79 80 72 

  *  puzzle03.txt
    wrong initial board
     - student   solution() initial board = 2
 1  2 
 3  0 

     - reference solution() initial board = 2
 2  0 
 1  3 

  *  puzzle04.txt
    wrong initial board
     - student   solution() initial board = 3
 1  2  3 
 4  5  6 
 7  8  0 

     - reference solution() initial board = 3
 0  1  3 
 4  2  5 
 7  8  6 

  *  puzzle05.txt
    wrong initial board
     - student   solution() initial board = 3
 1  2  3 
 4  5  6 
 7  8  0 

     - reference solution() initial board = 3
 4  1  3 
 0  2  6 
 7  5  8 

  *  puzzle06.txt
    wrong initial board
     - student   solution() initial board = 4
 1  2  3  4 
 5  6  7  8 
 9 10 11 12 
13 14 15  0 

     - reference solution() initial board = 4
 0  1  2  3 
 5  6  7  4 
 9 10 11  8 
13 14 15 12 

  *  puzzle07.txt
    wrong initial board
     - student   solution() initial board = 3
 1  2  3 
 4  5  6 
 7  8  0 

     - reference solution() initial board = 3
 1  2  3 
 0  7  6 
 5  4  8 

  *  puzzle08.txt
    wrong initial board
     - student   solution() initial board = 3
 1  2  3 
 4  5  6 
 7  8  0 

     - reference solution() initial board = 3
 2  3  5 
 1  0  4 
 7  8  6 

  *  puzzle10.txt
    wrong initial board
     - student   solution() initial board = 9
 1  2  3  4  5  6  7  8  9 
10 11 12 13 14 15 16 17 18 
19 20 21 22 23 24 25 26 27 
28 29 30 31 32 33 34 35 36 
37 38 39 40 41 42 43 44 45 
46 47 48 49 50 51 52 53 54 
55 56 57 58 59 60 61 62 63 
64 65 66 67 68 69 70 71 72 
73 74 75 76 77 78 79 80  0 

     - reference solution() initial board = 9
 1  2  3  4  5  6  7  8  9 
10 11 12 13 14 15 16 17 18 
19 20 21 22 23 24 25 26 27 
28 29 30 31 32 33 34 35 36 
37 38 39 40 41 42 43 44 45 
46 47 48 49 50 51 52 53 54 
55 56 57 58 59 60 61 62 63 
64  0 65 67 68 78 69 70 72 
73 74 66 75 76 77 79 71 80 

  *  puzzle15.txt
    wrong initial board
     - student   solution() initial board = 8
 1  2  3  4  5  6  7  8 
 9 10 11 12 13 14 15 16 
17 18 19 20 21 22 23 24 
25 26 27 28 29 30 31 32 
33 34 35 36 37 38 39 40 
41 42 43 44 45 46 47 48 
49 50 51 52 53 54 55 56 
57 58 59 60 61 62 63  0 

     - reference solution() initial board = 8
 1  2  3  4  5  6  7  8 
 9 10 11 12 13 14 15 16 
17 18 19 20 21 22 23 24 
 0 25 27 28 29 30 31 32 
34 26 35 36 37 38 39 40 
33 41 42 43 45 46 47 48 
49 50 51 44 61 53 54 56 
57 58 59 52 60 62 55 63 

==> FAILED

Test 3: Create multiple Solver objects at the same time and still correctly function
  *  puzzle04.txt and puzzle04.txt
  *  puzzle00.txt and puzzle04.txt
  *  puzzle04.txt and puzzle00.txt
==> passed

Test 4: Call isSolvable() with file inputs
  *  puzzle01.txt
  *  puzzle03.txt
  *  puzzle04.txt
  *  puzzle17.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-unsolvable2.txt
  *  puzzle4x4-unsolvable.txt
==> passed

Test 5: Call isSolvable() on random 2-by-2 puzzles
  *  2-by-2
==> passed

Test 6: Call moves() on unsolvable puzzles
  *  puzzle2x2-unsolvable1.txt
    student   moves() = 1
    reference moves() = -1
  *  puzzle2x2-unsolvable2.txt
    student   moves() = 2
    reference moves() = -1
  *  puzzle3x3-unsolvable1.txt
    student   moves() = 18
    reference moves() = -1
  *  puzzle3x3-unsolvable2.txt
    student   moves() = 24
    reference moves() = -1
  *  puzzle4x4-unsolvable.txt
    student   moves() = 13
    reference moves() = -1
==> FAILED

Test 7: Call solution() on unsolvable puzzles
  *  puzzle2x2-unsolvable1.txt
  *  puzzle2x2-unsolvable2.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-unsolvable2.txt
  *  puzzle4x4-unsolvable.txt
==> passed

Test 8: Check that Solver is immutable by comparing the results of two calls each to moves(), isSolvable(), and iterator(). The results of these two consecutive calls must match.
==> passed

Test 9: Call moves() with file inputs
  *  puzzle14.txt
  *  puzzle15.txt
  *  puzzle16.txt
  *  puzzle17.txt
  *  puzzle18.txt
  *  puzzle19.txt
  *  puzzle20.txt
  *  puzzle21.txt
  *  puzzle22.txt
  *  puzzle23.txt
  *  puzzle24.txt
  *  puzzle25.txt
  *  puzzle26.txt
  *  puzzle27.txt
  *  puzzle28.txt
     java.lang.OutOfMemoryError: Java heap space
     Board.<init>(Board.java:30)
     Board.neighbors(Board.java:140)
     Solver.<init>(Solver.java:53)
     TestSolver.testMoves(TestSolver.java:47)
     TestSolver.test9(TestSolver.java:420)
     TestSolver.main(TestSolver.java:480)

  *  puzzle29.txt
  *  puzzle30.txt

Total: 0/9 tests passed:Test aborted. Ran out of time or crashed before completion.
================================================================

******************************************************************************
*  memory usage
******************************************************************************

Computing memory of Board
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of an N-by-N board

              N       student (bytes)    reference (bytes)
----------------------------------------------------------
=> passed     4           120                  248
=> passed     8           312                  568
=> passed    12           632                 1016
=> passed    16          1080                 1592
=> passed    20          1656                 2296
=> passed    36          5240                 6392
=> passed    72         20792                23096
=> passed   120         57656                61496
==> 8/8 tests passed

Total: 8/8 tests passed!

Student   memory = 4.00 N^2 + 0.00 N + 56.00  (R^2 = 1.000)
Reference memory = 4.00 N^2 + 32.00 N + 56.00  (R^2 = 1.000)

================================================================



******************************************************************************
*  timing
******************************************************************************

Timing Solver
*-----------------------------------------------------------
Running 17 total tests.

Timing tests use your implementation of Board.java and Solver.java. Maximum allowed time per puzzle is 15 seconds.

                                                              delMin()
               filename   N    seconds    insert()          + delMax()         max PQ size
---------------------------------------------------------------------------------------------
=> FAILED  puzzle20.txt   3     0.90     169896  (32.5x)      63397  (20.4x)     106500  (50.1x)
=> FAILED  puzzle21.txt   3    22.32    3985504 (168.4x)    1440181 (103.1x)    2545324 (262.1x)
=> FAILED  puzzle22.txt   3     7.29    1727081 (127.7x)     619863  (77.9x)    1107219 (198.6x)
puzzle23.txt took 22.995 seconds to complete. Maximum allowed is 10 seconds. Aborting tests.
==> 0/17 tests passed

Total: 0/17 tests passed!

================================================================
